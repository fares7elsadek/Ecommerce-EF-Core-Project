// <auto-generated />
using System;
using EcommerceProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240726154844_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcommerceProject.Entites.AttributeValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("attributeId")
                        .HasColumnType("int");

                    b.Property<string>("attributeValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("attributeId");

                    b.ToTable("AttributeValues", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("attributeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Attributes", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.Cards", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("CardId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Cards", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.CardsItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<short>("quantity")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("productId");

                    b.ToTable("CardsItems", null, t =>
                        {
                            t.HasCheckConstraint("CK_Quantity3_NoNegative", "[quantity]>=0");
                        });
                });

            modelBuilder.Entity("EcommerceProject.Entites.Coupons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("couponDescription")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("couponEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("couponStartDate")
                        .HasColumnType("date");

                    b.Property<string>("discountType")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("varchar");

                    b.Property<decimal>("discountValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<int>("maxUsage")
                        .HasColumnType("int");

                    b.Property<int>("timesUsed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Coupons", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.CustomerAddresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("addressLine1")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("addressLine2")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("postalCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("customerId");

                    b.ToTable("CustomerAddresses", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.Customers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("passwordHashed")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.Galleries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<short>("displayOrder")
                        .HasColumnType("smallint");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<bool>("thumbnail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.ToTable("Galleries", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("RecieveTime")
                        .HasColumnType("date");

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("notificationExpireDate")
                        .HasColumnType("date");

                    b.Property<bool>("seen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("accountId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.OrderItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("shippingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("orderId");

                    b.HasIndex("productId");

                    b.HasIndex("shippingId");

                    b.ToTable("OrderItems", null, t =>
                        {
                            t.HasCheckConstraint("CK_price_NoNegative", "[price]>=0");

                            t.HasCheckConstraint("CK_quantity1_NoNegative", "[quantity]>=0");
                        });
                });

            modelBuilder.Entity("EcommerceProject.Entites.OrderStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("privacy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("statusName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("couponId")
                        .HasColumnType("int");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("orderApprovedAt")
                        .HasColumnType("date");

                    b.Property<DateTime>("orderDeliveredCarrierDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("orderDeliveredCustomerDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("couponId");

                    b.HasIndex("customerId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.ProductCoupons", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CuponId")
                        .HasColumnType("int");

                    b.Property<int>("CouponsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CuponId");

                    b.HasIndex("CouponsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductCoupons", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.ProductShippings", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingId")
                        .HasColumnType("int");

                    b.Property<int>("estimatedDays")
                        .HasColumnType("int");

                    b.Property<bool>("free")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("shipCharge")
                        .HasColumnType("decimal");

                    b.HasKey("ProductId", "ShippingId");

                    b.HasIndex("ShippingId");

                    b.ToTable("ProductShippings", null, t =>
                        {
                            t.HasCheckConstraint("CK_estimatedDays_NoNegative", "[estimatedDays]>=0");

                            t.HasCheckConstraint("CK_shipCharge_NoNegative", "[shipCharge]>=0");
                        });
                });

            modelBuilder.Entity("EcommerceProject.Entites.ProductTags", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<decimal>("discountPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("productNote")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<int>("productWeight")
                        .HasColumnType("int");

                    b.Property<bool>("published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("regularPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.Property<string>("shortDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Products", null, t =>
                        {
                            t.HasCheckConstraint("CK_Quantity2_NoNegative", "[quantity]>=0");

                            t.HasCheckConstraint("CK_discountPrice_NoNegative", "[discountPrice]>=0");

                            t.HasCheckConstraint("CK_regularPrice_NoNegative", "[regularPrice]>=0");
                        });
                });

            modelBuilder.Entity("EcommerceProject.Entites.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("RolesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("privileges")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("RolesId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.Shippings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<bool>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("iconPath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Shippings", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.StaffAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("passwordHashed")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("profileImage")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("StaffAccounts", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.StaffRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "StaffId");

                    b.HasIndex("AccountId");

                    b.ToTable("StaffRoles", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<string>("tagName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.productAttributes", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("productAttributes", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Entites.AttributeValues", b =>
                {
                    b.HasOne("EcommerceProject.Entites.Attributes", "attribute")
                        .WithMany("attributeValues")
                        .HasForeignKey("attributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("attribute");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Cards", b =>
                {
                    b.HasOne("EcommerceProject.Entites.Customers", "customer")
                        .WithMany("Cards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("EcommerceProject.Entites.CardsItems", b =>
                {
                    b.HasOne("EcommerceProject.Entites.Cards", "card")
                        .WithMany("cardsItems")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcommerceProject.Entites.Products", "product")
                        .WithMany("CardsItems")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("card");

                    b.Navigation("product");
                });

            modelBuilder.Entity("EcommerceProject.Entites.CustomerAddresses", b =>
                {
                    b.HasOne("EcommerceProject.Entites.Customers", "customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Galleries", b =>
                {
                    b.HasOne("EcommerceProject.Entites.Products", "product")
                        .WithMany("Galleries")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("product");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Notifications", b =>
                {
                    b.HasOne("EcommerceProject.Entites.StaffAccounts", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EcommerceProject.Entites.OrderItems", b =>
                {
                    b.HasOne("EcommerceProject.Entites.Orders", "order")
                        .WithMany("orderItems")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceProject.Entites.Products", "product")
                        .WithMany("OrderItems")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceProject.Entites.Shippings", "shipping")
                        .WithMany("orderItems")
                        .HasForeignKey("shippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("product");

                    b.Navigation("shipping");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Orders", b =>
                {
                    b.HasOne("EcommerceProject.Entites.OrderStatuses", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceProject.Entites.Coupons", "coupon")
                        .WithMany("orders")
                        .HasForeignKey("couponId");

                    b.HasOne("EcommerceProject.Entites.Customers", "customer")
                        .WithMany("Orders")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderStatus");

                    b.Navigation("coupon");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("EcommerceProject.Entites.ProductCoupons", b =>
                {
                    b.HasOne("EcommerceProject.Entites.Coupons", null)
                        .WithMany("ProductCoupons")
                        .HasForeignKey("CouponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceProject.Entites.Products", null)
                        .WithMany("ProductCoupons")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceProject.Entites.ProductShippings", b =>
                {
                    b.HasOne("EcommerceProject.Entites.Products", "product")
                        .WithMany("ProductShippings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EcommerceProject.Entites.Shippings", "shipping")
                        .WithMany("ProductShippings")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("shipping");
                });

            modelBuilder.Entity("EcommerceProject.Entites.ProductTags", b =>
                {
                    b.HasOne("EcommerceProject.Entites.Products", "product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceProject.Entites.Tags", "tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Roles", b =>
                {
                    b.HasOne("EcommerceProject.Entites.Roles", null)
                        .WithMany("roles")
                        .HasForeignKey("RolesId");
                });

            modelBuilder.Entity("EcommerceProject.Entites.StaffRoles", b =>
                {
                    b.HasOne("EcommerceProject.Entites.StaffAccounts", "Account")
                        .WithMany("StaffRoles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceProject.Entites.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EcommerceProject.Entites.productAttributes", b =>
                {
                    b.HasOne("EcommerceProject.Entites.Attributes", "attribute")
                        .WithMany("productAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceProject.Entites.Products", "Product")
                        .WithMany("productAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("attribute");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Attributes", b =>
                {
                    b.Navigation("attributeValues");

                    b.Navigation("productAttributes");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Cards", b =>
                {
                    b.Navigation("cardsItems");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Coupons", b =>
                {
                    b.Navigation("ProductCoupons");

                    b.Navigation("orders");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Customers", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EcommerceProject.Entites.OrderStatuses", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Orders", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Products", b =>
                {
                    b.Navigation("CardsItems");

                    b.Navigation("Galleries");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductCoupons");

                    b.Navigation("ProductShippings");

                    b.Navigation("ProductTags");

                    b.Navigation("productAttributes");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Roles", b =>
                {
                    b.Navigation("roles");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Shippings", b =>
                {
                    b.Navigation("ProductShippings");

                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("EcommerceProject.Entites.StaffAccounts", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("StaffRoles");
                });

            modelBuilder.Entity("EcommerceProject.Entites.Tags", b =>
                {
                    b.Navigation("ProductTags");
                });
#pragma warning restore 612, 618
        }
    }
}
